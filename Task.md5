Домашнее задание №3 (Java / Обобщения, коллекции, перечисления, исключения / Зоопарк)
Before
Для выполнения текущего задания вам потребуется код из "Домашнее задание №2", поэтому оно должно быть выполнено.

Важно сохранить историю изменений (коммитов), поэтому для переноса кода copy-paste не используется, а применяется git.

Прежде чем приступить к работе, нужно создать новую ветку (например homework3) на основе ветки предыдущего домашнего задания.

Задание
Создать в корневой директории пакет: model.

В пакете model создать перечисление Size с тремя перечислимыми константами: SMALL, MEDIUM, LARGE.

Добавить в класс Animal абстрактный метод getSize(). В классах конкретных животных должна быть реализация этого метода, которая возвращает константу перечисления Size.
Kotik и Duck должны иметь размер SMALL. Размер Fish - MEDIUM.

Добавить в класс Animal уникальный идентификатор - поле String name.
Данное поле должно инициализироваться при создании объека, в консрукторе с одним параметром.
Также придется добавить такой консруктор во всех наследниках. Чтобы не дублировать логику кода, пусть консруктор наследников вызывает консруктор базового класса.
После добавления конструктора с параметром, компилятор перестанет создавать конструктор по умолчанию (без параметров),
поэтому нужно изменить все строки кода с созданием объектов животных (оператор new) - добавить параметр name.
Добавить геттер для доступа к полю name.

В пакете model создать обобщенный (generic) класс Aviary<> - вольер для животных из предыдущего здания.
Должна быть возможность создавать вольеры отдельно для хищников и травоядных (наследников Animal).

Добавить в класс Aviary поле Size size и конструктор с одним параметром, иницилизирующим данное поле.

Для хранения животных в классе Aviary добавить поле HashMap<>. В качестве ключа использовать уникальный идентификатор (имя животного, name),
а в качестве значения использовать животное - объект того же типа, который используется в класс Aviary (универсальный параметр).
Сразу проинициализировать поле пустой коллекцией.

Добавьте в класс вольера методы:

addAnimal - добавить животное в вольер (метод принимает объект животного с соответствующим вольеру типом);
getAnimal - получить ссылку на животное в вольере по name, тип возвращаемого значения должен соответствовать универсальному параметру обобщенного класса;
removeAnimal - удалить животное из вольера по name, вернуть boolean в зависимости от того было ли указанное животное в вольере;
В пакет model добавить непроверяемое (unchecked) исключение WrongSizeException.
Изменить логику работы метода addAnimal так, чтобы исключение WrongSizeException выбрасывалось, если размер животного отличается от размера вольера.
Исключение не обрабатывать и не пробрасывать.

В пакет food добавить проверяемое (checked) исключение WrongFoodException.
Изменить метод eat в классах Carnivorous и Herbivore - заменить вывод в консоль выбрасыванием исключения WrongFoodException, если класс еды не соответствует животному.
Метод eat должен пробрасываеть исключение WrongFoodException дальше в вызывающий метод.

С помощью конструкции try-catch обработать все вызовы метода eat. Результатом обработки исключения должен быть вывод stack trace.

В классе Zoo создать и сразу проинициализировать два вольера любого размера:

carnivorousAviary для хищников;
herbivoreAviary для травоядных.
В классе Zoo создать внутренний статический метод fillCarnivorousAviary, который создает некоторое количество объектов хищников и добавляет их в вольер carnivorousAviary.
Убедиться что в carnivorousAviary невозможно добавить травоядное (код не должен компилироваться).

В классе Zoo создать внутренний статический метод fillHerbivoreAviary, который создает некоторое количество объектов травоядных и добавляет их в вольер herbivore.
Убедиться что в herbivoreAviary невозможно добавить хищника (код не должен компилироваться).

В классе Zoo создать внутренний статический метод getCarnivorous(String name), который возвращает экземпляр класса Carnivorous из коллекции carnivorousAviary по имени name.

В классе Zoo создать внутренний статический метод getHerbivore(String name), который возвращает экземпляр класса Herbivore из коллекции herbivoreAviary по имени name.

Требования
Использовать версию Java - 8, если преподаватель не указал иное.

Классы Aviary, Size, WrongSizeException должны находиться в пакете model;

Класс WrongFoodException должен находиться в пакете food;

Не использовать Reflection API (getClass().getName() разрешается использовать только для вывода в консоль);

Не использовать instanceof (кроме метода eat);

Класс вольера должен быть обобщенным;

Map<> внутри вольера должна быть сокрыта извне (private).

Формат проверок
Выполнить работу в проекте с домашним заданием на gitlab.com (разрешается и github.com).

Каждое домашнее задание должно быть выполнено в соответствующей отдельной ветке, например для текущей задачи homework3.

Для проектов на github: предоставить доступ к проекту для пользователя lfkrylov, уведомить преподавателя и дождаться подтверждения.
Для проектов на gitlab: предоставить доступ к проекту с ролью Developer для пользователя @lfkrylov

Готовую работу требуется отправить в систему автопроверки ДЗ: https://autoschool.rnd.lanit.ru/
Учетная запись для просмотра отчета: lanit / lanit

После прохождения всех тестов проверки, в проекте на gitlab.com (github.com) создать merge request (pull request) для слияния ветки домашнего задания (например homework3) с основной веткой (например main или master).

Отправить преподавателю на почту ссылки на:
- merge request;
- успешный allure отчет.
Не забыть указать ФИО.