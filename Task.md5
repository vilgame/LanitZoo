Домашнее задание №2 (Java / ООП / Зоопарк)
Before
Для выполнения текущего задания вам потребуется код из "Домашнее задание №1", поэтому оно должно быть выполнено.

Важно сохранить историю изменений (коммитов), поэтому для переноса кода copy-paste не используется, а применяется git.

Прежде чем приступить к работе, нужно создать новую ветку (например homework2) на основе ветки предыдущего домашнего задания.

Задание
Создать в проекте следующую стурктуру папок "src/main/java/" - это будет корневая директория исходного кода или source.

Создать в корневой директории пакеты: animals, employee, food для животных, сотрудников и еды соответственно.

Создать зоопарк, для животных реализовать иерархию классов как на схеме:

Animal
    Herbivore
        SomeHerbivore1
        SomeHerbivore2
    Carnivorous
        SomeCarnivorous1
        SomeCarnivorous2
Конкретных животных должно быть по 3 класса на каждую группу (итого 6 разных типов животных).
Обязательно должны быть Duck (утка), Fish (рыба, хищник или травоядное на выбор) и Kotik.

В пакете animals создать 4 интерфейса, определяющие поведение животных: Run, Swim, Fly, Voice, с не default методами run(), swim(), fly() и getVoice() соответственно.
Метод getVoice() интерфейсе Voice должен иметь тип возвращаемого значения String.
Классы животных должны реализовывать интерфейсы, соответствующие данным конкретным животным.

Создать архитектуру для классов еды в пакете food:

Food
    Grass
    Meat
Добавить животным шкалу сытости - переменную satiety и геттер для получения этого значения.

Добавить еде питательность, значение которой можно получить через метод getEnergy(), возвращающий int. Отдельную переменную для питательности не создавать, будем использовать только метод. Питательнсть у мяса и травы должна быть разной.

Все животные едят (знаем поведение), но делают это по-разному (нет общей реализации), по этому в классе Animal должен быть абстрактный метод eat(Food food), который принимает в качестве аргумента объект еды. Реализация данного метода будет в классах наследниках (подумать в каких). Если переданная еда не подходит животному (хищники не едят траву, травоядные не едят мясо), то в консоль должно быть выведено соответствующее предупреждение. Проверку на соответствие типа еды выполнять через instanceof.

Примечание: принципы ООП и строгая статическая типизация в Java позволяют нам не использовать instanceof и getClass() для определения типа объектов, поэтому в данной модели зоопарка правильнее будет создать два метода: eat(Grass grass) для травоядных и eat(Meat meat) для хищников, чтобы не допустить ошибки при кормлении животного. Однако мы в учебных целях специально просим использовать не совсем уместный метод eat(Food food), чтобы создать место потенциальной ошибки и показать на этом примере некоторые языковые конструкции.

В пакете employee cоздать класс рабочего зоопарка (Worker) с методами:

feed(…) – покормить любое животное любой едой. У метода должно быть два параметра – животное и еда.
getVoice(…) – заставить животное подать голос (вывести на экран то, что говорит конкретное животное). У метода должен быть один параметр – животное, которое издает звук. Метод должен принимать в качестве аргумента только тех животных, которые могут издавать звуки.
В корневом каталоге программы создать класс Zoo c точкой входа в программу (метод main).

В методе main необходимо создать объекты классов животных, еды, работника зоопарка. Вызвать у объекта рабочего все его методы с разными возможными комбинациями параметров (например попытаться накормить хищника и мясом и травой).

В классе Zoo создать статический метод createPond() без параметров, который возвращает массив с животными, умеющими плавать. В пруду может быть несколько животных одного типа, но самих типов (различных классов) должно быть не менее двух.
В методе main в цикле вызвать метод swim() у каждого животного из массива, созданного через createPond().

Добавить на ваше усмотрение логику методов. Например, выводить на в консоль результат выполнения. Главное чтобы тело методов не было пустым (разумеется абстрактные методы не в счет).

При добавлении полей и вспомогательных методов помнить про принцип инкапсуляции, и вообще максимально используйте принципы ООП.

Требования
Использовать версию Java - 8, если преподаватель не указал иное.

Корневая директория исходного кода должна быть "src/main/java/".

Классы для животных и их интерфейсы должны находиться в пакете animals;

Классы для еды должны находиться в пакете food;

Классы для сотрудников должны находиться в пакете employee;

В программе должны присутствовать абстрактные классы и абстрактные методы;

В программе должны присутствовать интерфейсы.

В программе должны быть классы Fish, Duck и Kotik.

Метод getVoice класса Worker не должен принимать экземпляры класса Fish и других немых животных. При попытке это сделать программа не должна компилироваться (не должна запускаться).
p.s. выбрасывание исключения не является ошибкой компиляции

Instanceof можно применять только в методе eat()

Не использовать Reflection API (getClass().getName() разрешается использовать только для вывода в консоль)

В программе не должно быть не абстрактных методов без реализации, другими словами не должно быть методов с пустым телом - { }.

В корневой директории проекта (не путать с корневой директорией исходного кода) должен быть файл .gitignore

Формат проверок
Выполнить работу в проекте с домашним заданием на gitlab.com (разрешается и github.com).

Каждое домашнее задание должно быть выполнено в соответствующей отдельной ветке, например для текущей задачи homework2.

Для проектов на github: предоставить доступ к проекту для пользователя ifkrylov, уведомить преподавателя и дождаться подтверждения.
Для проектов на gitlab: предоставить доступ к проекту с ролью Developer для пользователя @ifkrylov

Готовую работу требуется отправить в систему автопроверки ДЗ: https://autoschool.rnd.lanit.ru/
Учетная запись для просмотра отчета: lanit / lanit

После прохождения всех тестов проверки, в проекте на gitlab.com (github.com) создать merge request (pull request) для слияния ветки домашнего задания (например homework2) с основной веткой (например main или master).

Отправить преподавателю на почту ссылки на:
- merge request;
- успешный allure отчет.
Не забыть указать ФИО.