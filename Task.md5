Домашнее задание №1 (Java / Syntax / Kotik)
Задание
Создать в проекте следующую структуру папок "src/main/java/" - это будет корневая директория исходного кода или source.
Выражение package (первая строка в java файле), если оно есть, будет относительно данной папки.

Создать класс Kotik.

В классе Kotik объявить переменные экземпляра: name (имя), voice (голос, как мяукает), satiety (сытость), weight (вес).

Создать два конструктора класса - со всеми параметрами (в порядке: name, voice, satiety, weight) и без параметров.

Добавить в класс статическую переменную count, отвечающую за количество созданных экземпляров класса. К переменной должна применяться арифметическая операция «инкремент» при каждом создании экземпляра класса.

Создать 5 методов поведения животного: play (играть), sleep (спать), wash (умываться), walk (гулять), hunt (охотиться). Реализовать в данных методах следующую логику:

Если котик сыт (сытость больше нуля), то действие выполняется, например вывести соответствующую информацию в консоль. Показатель сытости при этом должен уменьшиться.
Если котик голоден, то действие не выполняется (котик просит есть).
Метод должен возвращать логическое значение, в зависимости от того было выполнено действие или нет.
Создайте константу METHODS = 5, соответствующую количеству методов поведения животного.

Сделать три перегрузки метода eat(), одна из них будет принимать только количество условных единиц сытости и увеличивать на них соответствующую переменную экземпляра, другая единицы сытости и название еды, третья не принимает параметров, но содержит внутри себя вызов перегрузки, принимающей единицы сытости и название еды.

Создать в классе Kotik метод liveAnotherDay(), в котором будет цикл на 24 итерации, в каждой из которых будет случайным образом вызываться один из методов котика, отвечающих за его поведение, и если котик вместо выполнения действия будет просить есть - его надо будет покормить.
Для выбора метода используйте оператор switch.
Метод должен возвращать массив строк, где каждый элемент массива - описание того, когда и чем занимался котик в формате "час - действие", например:
0 - играл
1 - спал
2 - ел
...
23 - играл

Изменить модификаторы доступа всех переменных в классе Kotik на private. Для доступа к переменным из других классов создать getters и setters.

Создать в корневой директории source класс Application с точкой входа в программу (метод public static void main(String[] args)).

В этом методе main создать два экземпляр класса Kotik. Для первого экземпляра использовать конструктор с параметрами, для второго конструктор без параметров в сочетании с сеттерами для инициализации переменных.

Вызвать у любого созданного экземпляра котика метод liveAnotherDay() и вывести в консоль полученный массив (используйте цикл for each).

Вывести в консоль имя и вес любого созданного экземпляра котика.

Вывести на экран результат сравнения одинаково ли разговаривают котики. Для этого нужно создать в классе Application статический метод compareVoice, который принимает два объекта класса Kotik и возвращает результат эквивалентности переменных voice каждого объекта.

Последней строкой в методе main вывести в консоль количество котиков, созданных в процессе выполнения программы.

Создать в корневой директории пакет animals.

Поместить класс Kotik в пакет animals. При необходимости изменить модификаторы доступа методов, чтобы программа скомпилировалась.

Подсказки
Вызывать случайный метод можно с помощью случайного числа от 1-го до METHODS, где METHODS - число методов, которые планируется вызывать, и оператора switch.

Получить случайное число можно с помощью

(int) (Math.random() * METHODS) + 1
Требования
Использовать версию Java - 8, если преподаватель не указал иное.

Корневая директория исходного кода должна быть "src/main/java/".

Класс Kotik должен находиться в пакете src/main/java/animals.

В классе Kotik должны быть поля name, voice, satiety, weight, count, METHODS.

Все поля в классе Kotik должны быть private.

Для всех переменных (кроме констант) должны быть геттеры и сеттеры.

Методы поведения котика должны иметь возвращаемый тип данных boolean.

Метод liveAnotherDay() должен возвращать массив на 24 строки в формате "час - действие".

В классе Kotik должно быть 3 перегруженных метода eat.

В классе Kotik должно быть 2 перегруженных конструктора.

Программа должна создавать два экземпляра класса Kotik

Программа должна выводить результат сравнения переменных voice у созданных объектов.

Программа должна выводить количество созданных объектов.

Формат проверки задания
Выполнить работу в проекте с домашним заданием на gitlab.com (разрешается и github.com).

Каждое домашнее задание должно быть выполнено в соответствующей отдельной ветке, например для текущей задачи homework1.

Для проектов на github: предоставить доступ к проекту для пользователя ifkrylov, уведомить преподавателя и дождаться подтверждения.
Для проектов на gitlab: предоставить доступ к проекту с ролью Developer для пользователя @ifkrylov

Готовую работу требуется отправить в систему автопроверки ДЗ: https://autoschool.rnd.lanit.ru/
Учетная запись для просмотра отчета: lanit / lanit

После прохождения всех тестов проверки, в проекте на gitlab.com (github.com) создать merge request (pull request) для слияния ветки домашнего задания (например homework1) с основной веткой (например main или master).

Отправить преподавателю на почту ссылки на:
- merge request;
- успешный allure отчет.
Не забыть указать ФИО.

